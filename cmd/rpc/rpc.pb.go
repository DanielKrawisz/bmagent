// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	BitmessageRPC
	BMRPCRequest
	BMRPCReply
	ErrorReply
	BMRPCPush
	NewAddressRequest
	BitmessageSelector
	SendBitmessage
	ListAddressesRequest
	NewAddressReply
	ListAddressesReply
	BitmessageAddress
	Bitmessage
	TextBitmessage
	HelpRequest
	HelpResponse
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BitmessageRPCType int32

const (
	BitmessageRPCType_BMRPC_ERROR      BitmessageRPCType = 0
	BitmessageRPCType_BMRPC_REQUEST    BitmessageRPCType = 1
	BitmessageRPCType_BMRPC_REPLY      BitmessageRPCType = 2
	BitmessageRPCType_BMRPC_PUSHNOTIFY BitmessageRPCType = 3
)

var BitmessageRPCType_name = map[int32]string{
	0: "BMRPC_ERROR",
	1: "BMRPC_REQUEST",
	2: "BMRPC_REPLY",
	3: "BMRPC_PUSHNOTIFY",
}
var BitmessageRPCType_value = map[string]int32{
	"BMRPC_ERROR":      0,
	"BMRPC_REQUEST":    1,
	"BMRPC_REPLY":      2,
	"BMRPC_PUSHNOTIFY": 3,
}

func (x BitmessageRPCType) Enum() *BitmessageRPCType {
	p := new(BitmessageRPCType)
	*p = x
	return p
}
func (x BitmessageRPCType) String() string {
	return proto.EnumName(BitmessageRPCType_name, int32(x))
}
func (x *BitmessageRPCType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BitmessageRPCType_value, data, "BitmessageRPCType")
	if err != nil {
		return err
	}
	*x = BitmessageRPCType(value)
	return nil
}
func (BitmessageRPCType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RequestType int32

const (
	RequestType_ERROR          RequestType = 0
	RequestType_HELP           RequestType = 1
	RequestType_NEWADDRESS     RequestType = 2
	RequestType_GETMESSAGES    RequestType = 3
	RequestType_DELETEMESSAGES RequestType = 4
	RequestType_SUBSCRIBE      RequestType = 5
	RequestType_SEND           RequestType = 6
)

var RequestType_name = map[int32]string{
	0: "ERROR",
	1: "HELP",
	2: "NEWADDRESS",
	3: "GETMESSAGES",
	4: "DELETEMESSAGES",
	5: "SUBSCRIBE",
	6: "SEND",
}
var RequestType_value = map[string]int32{
	"ERROR":          0,
	"HELP":           1,
	"NEWADDRESS":     2,
	"GETMESSAGES":    3,
	"DELETEMESSAGES": 4,
	"SUBSCRIBE":      5,
	"SEND":           6,
}

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}
func (x RequestType) String() string {
	return proto.EnumName(RequestType_name, int32(x))
}
func (x *RequestType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RequestType_value, data, "RequestType")
	if err != nil {
		return err
	}
	*x = RequestType(value)
	return nil
}
func (RequestType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type BitmessageReplyStatus int32

const (
	BitmessageReplyStatus_BMRPCSTATUS_ERROR        BitmessageReplyStatus = 0
	BitmessageReplyStatus_BMRPCSTATUS_SUCCESS      BitmessageReplyStatus = 1
	BitmessageReplyStatus_BMRPCSTATUS_UNAUTHORIZED BitmessageReplyStatus = 2
	BitmessageReplyStatus_BMRPCSTATUS_INVALID      BitmessageReplyStatus = 3
)

var BitmessageReplyStatus_name = map[int32]string{
	0: "BMRPCSTATUS_ERROR",
	1: "BMRPCSTATUS_SUCCESS",
	2: "BMRPCSTATUS_UNAUTHORIZED",
	3: "BMRPCSTATUS_INVALID",
}
var BitmessageReplyStatus_value = map[string]int32{
	"BMRPCSTATUS_ERROR":        0,
	"BMRPCSTATUS_SUCCESS":      1,
	"BMRPCSTATUS_UNAUTHORIZED": 2,
	"BMRPCSTATUS_INVALID":      3,
}

func (x BitmessageReplyStatus) Enum() *BitmessageReplyStatus {
	p := new(BitmessageReplyStatus)
	*p = x
	return p
}
func (x BitmessageReplyStatus) String() string {
	return proto.EnumName(BitmessageReplyStatus_name, int32(x))
}
func (x *BitmessageReplyStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BitmessageReplyStatus_value, data, "BitmessageReplyStatus")
	if err != nil {
		return err
	}
	*x = BitmessageReplyStatus(value)
	return nil
}
func (BitmessageReplyStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type BitmessageType int32

const (
	BitmessageType_BITMESSAGE_ERROR     BitmessageType = 0
	BitmessageType_BITMESSAGE_MESSAGE   BitmessageType = 1
	BitmessageType_BITMESSAGE_BROADCAST BitmessageType = 2
)

var BitmessageType_name = map[int32]string{
	0: "BITMESSAGE_ERROR",
	1: "BITMESSAGE_MESSAGE",
	2: "BITMESSAGE_BROADCAST",
}
var BitmessageType_value = map[string]int32{
	"BITMESSAGE_ERROR":     0,
	"BITMESSAGE_MESSAGE":   1,
	"BITMESSAGE_BROADCAST": 2,
}

func (x BitmessageType) Enum() *BitmessageType {
	p := new(BitmessageType)
	*p = x
	return p
}
func (x BitmessageType) String() string {
	return proto.EnumName(BitmessageType_name, int32(x))
}
func (x *BitmessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BitmessageType_value, data, "BitmessageType")
	if err != nil {
		return err
	}
	*x = BitmessageType(value)
	return nil
}
func (BitmessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type MessageSelector int32

const (
	MessageSelector_MESSAGESELECTOR_ERROR        MessageSelector = 0
	MessageSelector_MESSAGESELECTOR_INDIVIDUAL   MessageSelector = 1
	MessageSelector_MESSAGESELECTOR_UNREAD       MessageSelector = 2
	MessageSelector_MESSAGESELECTOR_READ         MessageSelector = 3
	MessageSelector_MESSAGESELECTOR_INCOMING     MessageSelector = 4
	MessageSelector_MESSAGESELECTOR_SENT         MessageSelector = 5
	MessageSelector_MESSAGESELECTOR_ACKNOWLEDGED MessageSelector = 6
	MessageSelector_MESSAGESELECTOR_OUTGOING     MessageSelector = 7
)

var MessageSelector_name = map[int32]string{
	0: "MESSAGESELECTOR_ERROR",
	1: "MESSAGESELECTOR_INDIVIDUAL",
	2: "MESSAGESELECTOR_UNREAD",
	3: "MESSAGESELECTOR_READ",
	4: "MESSAGESELECTOR_INCOMING",
	5: "MESSAGESELECTOR_SENT",
	6: "MESSAGESELECTOR_ACKNOWLEDGED",
	7: "MESSAGESELECTOR_OUTGOING",
}
var MessageSelector_value = map[string]int32{
	"MESSAGESELECTOR_ERROR":        0,
	"MESSAGESELECTOR_INDIVIDUAL":   1,
	"MESSAGESELECTOR_UNREAD":       2,
	"MESSAGESELECTOR_READ":         3,
	"MESSAGESELECTOR_INCOMING":     4,
	"MESSAGESELECTOR_SENT":         5,
	"MESSAGESELECTOR_ACKNOWLEDGED": 6,
	"MESSAGESELECTOR_OUTGOING":     7,
}

func (x MessageSelector) Enum() *MessageSelector {
	p := new(MessageSelector)
	*p = x
	return p
}
func (x MessageSelector) String() string {
	return proto.EnumName(MessageSelector_name, int32(x))
}
func (x *MessageSelector) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageSelector_value, data, "MessageSelector")
	if err != nil {
		return err
	}
	*x = MessageSelector(value)
	return nil
}
func (MessageSelector) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ReplySelector int32

const (
	ReplySelector_REPLYSELECTOR_ERROR ReplySelector = 0
	ReplySelector_REPLYSELECTOR_INDEX ReplySelector = 1
	ReplySelector_REPLYSELECTOR_FULL  ReplySelector = 2
)

var ReplySelector_name = map[int32]string{
	0: "REPLYSELECTOR_ERROR",
	1: "REPLYSELECTOR_INDEX",
	2: "REPLYSELECTOR_FULL",
}
var ReplySelector_value = map[string]int32{
	"REPLYSELECTOR_ERROR": 0,
	"REPLYSELECTOR_INDEX": 1,
	"REPLYSELECTOR_FULL":  2,
}

func (x ReplySelector) Enum() *ReplySelector {
	p := new(ReplySelector)
	*p = x
	return p
}
func (x ReplySelector) String() string {
	return proto.EnumName(ReplySelector_name, int32(x))
}
func (x *ReplySelector) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReplySelector_value, data, "ReplySelector")
	if err != nil {
		return err
	}
	*x = ReplySelector(value)
	return nil
}
func (ReplySelector) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type BitmessageRPC struct {
	Version *uint32            `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Type    *BitmessageRPCType `protobuf:"varint,2,opt,name=type,enum=rpc.BitmessageRPCType" json:"type,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*BitmessageRPC_Request
	//	*BitmessageRPC_Reply
	//	*BitmessageRPC_Push
	Payload          isBitmessageRPC_Payload `protobuf_oneof:"payload"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *BitmessageRPC) Reset()                    { *m = BitmessageRPC{} }
func (m *BitmessageRPC) String() string            { return proto.CompactTextString(m) }
func (*BitmessageRPC) ProtoMessage()               {}
func (*BitmessageRPC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isBitmessageRPC_Payload interface {
	isBitmessageRPC_Payload()
}

type BitmessageRPC_Request struct {
	Request *BMRPCRequest `protobuf:"bytes,3,opt,name=request,oneof"`
}
type BitmessageRPC_Reply struct {
	Reply *BMRPCReply `protobuf:"bytes,4,opt,name=reply,oneof"`
}
type BitmessageRPC_Push struct {
	Push *BMRPCPush `protobuf:"bytes,5,opt,name=push,oneof"`
}

func (*BitmessageRPC_Request) isBitmessageRPC_Payload() {}
func (*BitmessageRPC_Reply) isBitmessageRPC_Payload()   {}
func (*BitmessageRPC_Push) isBitmessageRPC_Payload()    {}

func (m *BitmessageRPC) GetPayload() isBitmessageRPC_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *BitmessageRPC) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *BitmessageRPC) GetType() BitmessageRPCType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return BitmessageRPCType_BMRPC_ERROR
}

func (m *BitmessageRPC) GetRequest() *BMRPCRequest {
	if x, ok := m.GetPayload().(*BitmessageRPC_Request); ok {
		return x.Request
	}
	return nil
}

func (m *BitmessageRPC) GetReply() *BMRPCReply {
	if x, ok := m.GetPayload().(*BitmessageRPC_Reply); ok {
		return x.Reply
	}
	return nil
}

func (m *BitmessageRPC) GetPush() *BMRPCPush {
	if x, ok := m.GetPayload().(*BitmessageRPC_Push); ok {
		return x.Push
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BitmessageRPC) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BitmessageRPC_OneofMarshaler, _BitmessageRPC_OneofUnmarshaler, _BitmessageRPC_OneofSizer, []interface{}{
		(*BitmessageRPC_Request)(nil),
		(*BitmessageRPC_Reply)(nil),
		(*BitmessageRPC_Push)(nil),
	}
}

func _BitmessageRPC_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BitmessageRPC)
	// payload
	switch x := m.Payload.(type) {
	case *BitmessageRPC_Request:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Request); err != nil {
			return err
		}
	case *BitmessageRPC_Reply:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reply); err != nil {
			return err
		}
	case *BitmessageRPC_Push:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Push); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BitmessageRPC.Payload has unexpected type %T", x)
	}
	return nil
}

func _BitmessageRPC_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BitmessageRPC)
	switch tag {
	case 3: // payload.request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BMRPCRequest)
		err := b.DecodeMessage(msg)
		m.Payload = &BitmessageRPC_Request{msg}
		return true, err
	case 4: // payload.reply
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BMRPCReply)
		err := b.DecodeMessage(msg)
		m.Payload = &BitmessageRPC_Reply{msg}
		return true, err
	case 5: // payload.push
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BMRPCPush)
		err := b.DecodeMessage(msg)
		m.Payload = &BitmessageRPC_Push{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BitmessageRPC_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BitmessageRPC)
	// payload
	switch x := m.Payload.(type) {
	case *BitmessageRPC_Request:
		s := proto.Size(x.Request)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BitmessageRPC_Reply:
		s := proto.Size(x.Reply)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BitmessageRPC_Push:
		s := proto.Size(x.Push)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type BMRPCRequest struct {
	Version   *uint32      `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Id        *string      `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Cookie    []byte       `protobuf:"bytes,3,opt,name=cookie" json:"cookie,omitempty"`
	Pubkey    []byte       `protobuf:"bytes,4,opt,name=pubkey" json:"pubkey,omitempty"`
	Type      *RequestType `protobuf:"varint,5,opt,name=type,enum=rpc.RequestType" json:"type,omitempty"`
	Signature []byte       `protobuf:"bytes,6,opt,name=signature" json:"signature,omitempty"`
	// Types that are valid to be assigned to Request:
	//	*BMRPCRequest_Newaddress
	//	*BMRPCRequest_Messageselector
	//	*BMRPCRequest_Sendbitmessage
	//	*BMRPCRequest_Help
	//	*BMRPCRequest_Listaddresses
	Request          isBMRPCRequest_Request `protobuf_oneof:"request"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *BMRPCRequest) Reset()                    { *m = BMRPCRequest{} }
func (m *BMRPCRequest) String() string            { return proto.CompactTextString(m) }
func (*BMRPCRequest) ProtoMessage()               {}
func (*BMRPCRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isBMRPCRequest_Request interface {
	isBMRPCRequest_Request()
}

type BMRPCRequest_Newaddress struct {
	Newaddress *NewAddressRequest `protobuf:"bytes,9,opt,name=newaddress,oneof"`
}
type BMRPCRequest_Messageselector struct {
	Messageselector *BitmessageSelector `protobuf:"bytes,10,opt,name=messageselector,oneof"`
}
type BMRPCRequest_Sendbitmessage struct {
	Sendbitmessage *SendBitmessage `protobuf:"bytes,11,opt,name=sendbitmessage,oneof"`
}
type BMRPCRequest_Help struct {
	Help *HelpRequest `protobuf:"bytes,12,opt,name=help,oneof"`
}
type BMRPCRequest_Listaddresses struct {
	Listaddresses *ListAddressesRequest `protobuf:"bytes,13,opt,name=listaddresses,oneof"`
}

func (*BMRPCRequest_Newaddress) isBMRPCRequest_Request()      {}
func (*BMRPCRequest_Messageselector) isBMRPCRequest_Request() {}
func (*BMRPCRequest_Sendbitmessage) isBMRPCRequest_Request()  {}
func (*BMRPCRequest_Help) isBMRPCRequest_Request()            {}
func (*BMRPCRequest_Listaddresses) isBMRPCRequest_Request()   {}

func (m *BMRPCRequest) GetRequest() isBMRPCRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *BMRPCRequest) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *BMRPCRequest) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BMRPCRequest) GetCookie() []byte {
	if m != nil {
		return m.Cookie
	}
	return nil
}

func (m *BMRPCRequest) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *BMRPCRequest) GetType() RequestType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return RequestType_ERROR
}

func (m *BMRPCRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *BMRPCRequest) GetNewaddress() *NewAddressRequest {
	if x, ok := m.GetRequest().(*BMRPCRequest_Newaddress); ok {
		return x.Newaddress
	}
	return nil
}

func (m *BMRPCRequest) GetMessageselector() *BitmessageSelector {
	if x, ok := m.GetRequest().(*BMRPCRequest_Messageselector); ok {
		return x.Messageselector
	}
	return nil
}

func (m *BMRPCRequest) GetSendbitmessage() *SendBitmessage {
	if x, ok := m.GetRequest().(*BMRPCRequest_Sendbitmessage); ok {
		return x.Sendbitmessage
	}
	return nil
}

func (m *BMRPCRequest) GetHelp() *HelpRequest {
	if x, ok := m.GetRequest().(*BMRPCRequest_Help); ok {
		return x.Help
	}
	return nil
}

func (m *BMRPCRequest) GetListaddresses() *ListAddressesRequest {
	if x, ok := m.GetRequest().(*BMRPCRequest_Listaddresses); ok {
		return x.Listaddresses
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BMRPCRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BMRPCRequest_OneofMarshaler, _BMRPCRequest_OneofUnmarshaler, _BMRPCRequest_OneofSizer, []interface{}{
		(*BMRPCRequest_Newaddress)(nil),
		(*BMRPCRequest_Messageselector)(nil),
		(*BMRPCRequest_Sendbitmessage)(nil),
		(*BMRPCRequest_Help)(nil),
		(*BMRPCRequest_Listaddresses)(nil),
	}
}

func _BMRPCRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BMRPCRequest)
	// request
	switch x := m.Request.(type) {
	case *BMRPCRequest_Newaddress:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Newaddress); err != nil {
			return err
		}
	case *BMRPCRequest_Messageselector:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Messageselector); err != nil {
			return err
		}
	case *BMRPCRequest_Sendbitmessage:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sendbitmessage); err != nil {
			return err
		}
	case *BMRPCRequest_Help:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Help); err != nil {
			return err
		}
	case *BMRPCRequest_Listaddresses:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Listaddresses); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BMRPCRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _BMRPCRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BMRPCRequest)
	switch tag {
	case 9: // request.newaddress
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NewAddressRequest)
		err := b.DecodeMessage(msg)
		m.Request = &BMRPCRequest_Newaddress{msg}
		return true, err
	case 10: // request.messageselector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BitmessageSelector)
		err := b.DecodeMessage(msg)
		m.Request = &BMRPCRequest_Messageselector{msg}
		return true, err
	case 11: // request.sendbitmessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SendBitmessage)
		err := b.DecodeMessage(msg)
		m.Request = &BMRPCRequest_Sendbitmessage{msg}
		return true, err
	case 12: // request.help
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HelpRequest)
		err := b.DecodeMessage(msg)
		m.Request = &BMRPCRequest_Help{msg}
		return true, err
	case 13: // request.listaddresses
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListAddressesRequest)
		err := b.DecodeMessage(msg)
		m.Request = &BMRPCRequest_Listaddresses{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BMRPCRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BMRPCRequest)
	// request
	switch x := m.Request.(type) {
	case *BMRPCRequest_Newaddress:
		s := proto.Size(x.Newaddress)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BMRPCRequest_Messageselector:
		s := proto.Size(x.Messageselector)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BMRPCRequest_Sendbitmessage:
		s := proto.Size(x.Sendbitmessage)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BMRPCRequest_Help:
		s := proto.Size(x.Help)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BMRPCRequest_Listaddresses:
		s := proto.Size(x.Listaddresses)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type BMRPCReply struct {
	Version   *uint32                `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Id        *string                `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Requestid *string                `protobuf:"bytes,3,opt,name=requestid" json:"requestid,omitempty"`
	Type      *RequestType           `protobuf:"varint,4,opt,name=type,enum=rpc.RequestType" json:"type,omitempty"`
	Status    *BitmessageReplyStatus `protobuf:"varint,5,opt,name=status,enum=rpc.BitmessageReplyStatus" json:"status,omitempty"`
	Signature []byte                 `protobuf:"bytes,6,opt,name=signature" json:"signature,omitempty"`
	// Types that are valid to be assigned to Reply:
	//	*BMRPCReply_ErrorReply
	//	*BMRPCReply_Newaddress
	//	*BMRPCReply_Listaddresses
	Reply            isBMRPCReply_Reply `protobuf_oneof:"reply"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *BMRPCReply) Reset()                    { *m = BMRPCReply{} }
func (m *BMRPCReply) String() string            { return proto.CompactTextString(m) }
func (*BMRPCReply) ProtoMessage()               {}
func (*BMRPCReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isBMRPCReply_Reply interface {
	isBMRPCReply_Reply()
}

type BMRPCReply_ErrorReply struct {
	ErrorReply *ErrorReply `protobuf:"bytes,8,opt,name=errorReply,oneof"`
}
type BMRPCReply_Newaddress struct {
	Newaddress *NewAddressReply `protobuf:"bytes,9,opt,name=newaddress,oneof"`
}
type BMRPCReply_Listaddresses struct {
	Listaddresses *ListAddressesReply `protobuf:"bytes,10,opt,name=listaddresses,oneof"`
}

func (*BMRPCReply_ErrorReply) isBMRPCReply_Reply()    {}
func (*BMRPCReply_Newaddress) isBMRPCReply_Reply()    {}
func (*BMRPCReply_Listaddresses) isBMRPCReply_Reply() {}

func (m *BMRPCReply) GetReply() isBMRPCReply_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *BMRPCReply) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *BMRPCReply) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BMRPCReply) GetRequestid() string {
	if m != nil && m.Requestid != nil {
		return *m.Requestid
	}
	return ""
}

func (m *BMRPCReply) GetType() RequestType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return RequestType_ERROR
}

func (m *BMRPCReply) GetStatus() BitmessageReplyStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return BitmessageReplyStatus_BMRPCSTATUS_ERROR
}

func (m *BMRPCReply) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *BMRPCReply) GetErrorReply() *ErrorReply {
	if x, ok := m.GetReply().(*BMRPCReply_ErrorReply); ok {
		return x.ErrorReply
	}
	return nil
}

func (m *BMRPCReply) GetNewaddress() *NewAddressReply {
	if x, ok := m.GetReply().(*BMRPCReply_Newaddress); ok {
		return x.Newaddress
	}
	return nil
}

func (m *BMRPCReply) GetListaddresses() *ListAddressesReply {
	if x, ok := m.GetReply().(*BMRPCReply_Listaddresses); ok {
		return x.Listaddresses
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BMRPCReply) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BMRPCReply_OneofMarshaler, _BMRPCReply_OneofUnmarshaler, _BMRPCReply_OneofSizer, []interface{}{
		(*BMRPCReply_ErrorReply)(nil),
		(*BMRPCReply_Newaddress)(nil),
		(*BMRPCReply_Listaddresses)(nil),
	}
}

func _BMRPCReply_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BMRPCReply)
	// reply
	switch x := m.Reply.(type) {
	case *BMRPCReply_ErrorReply:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ErrorReply); err != nil {
			return err
		}
	case *BMRPCReply_Newaddress:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Newaddress); err != nil {
			return err
		}
	case *BMRPCReply_Listaddresses:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Listaddresses); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BMRPCReply.Reply has unexpected type %T", x)
	}
	return nil
}

func _BMRPCReply_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BMRPCReply)
	switch tag {
	case 8: // reply.errorReply
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ErrorReply)
		err := b.DecodeMessage(msg)
		m.Reply = &BMRPCReply_ErrorReply{msg}
		return true, err
	case 9: // reply.newaddress
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NewAddressReply)
		err := b.DecodeMessage(msg)
		m.Reply = &BMRPCReply_Newaddress{msg}
		return true, err
	case 10: // reply.listaddresses
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListAddressesReply)
		err := b.DecodeMessage(msg)
		m.Reply = &BMRPCReply_Listaddresses{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BMRPCReply_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BMRPCReply)
	// reply
	switch x := m.Reply.(type) {
	case *BMRPCReply_ErrorReply:
		s := proto.Size(x.ErrorReply)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BMRPCReply_Newaddress:
		s := proto.Size(x.Newaddress)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BMRPCReply_Listaddresses:
		s := proto.Size(x.Listaddresses)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ErrorReply struct {
	Version          *uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Error            *string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ErrorReply) Reset()                    { *m = ErrorReply{} }
func (m *ErrorReply) String() string            { return proto.CompactTextString(m) }
func (*ErrorReply) ProtoMessage()               {}
func (*ErrorReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ErrorReply) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *ErrorReply) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

type BMRPCPush struct {
	Version          *uint32       `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Message          []*Bitmessage `protobuf:"bytes,8,rep,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *BMRPCPush) Reset()                    { *m = BMRPCPush{} }
func (m *BMRPCPush) String() string            { return proto.CompactTextString(m) }
func (*BMRPCPush) ProtoMessage()               {}
func (*BMRPCPush) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BMRPCPush) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *BMRPCPush) GetMessage() []*Bitmessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type NewAddressRequest struct {
	Version          *uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Addressversion   *uint32 `protobuf:"varint,2,opt,name=addressversion" json:"addressversion,omitempty"`
	Label            *string `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
	Stream           *uint32 `protobuf:"varint,4,opt,name=stream" json:"stream,omitempty"`
	Pow              *uint32 `protobuf:"varint,5,opt,name=pow" json:"pow,omitempty"`
	Extrabytes       *uint32 `protobuf:"varint,6,opt,name=extrabytes" json:"extrabytes,omitempty"`
	Dml              *bool   `protobuf:"varint,7,opt,name=dml" json:"dml,omitempty"`
	Deterministic    *bool   `protobuf:"varint,8,opt,name=deterministic" json:"deterministic,omitempty"`
	Seed             []byte  `protobuf:"bytes,9,opt,name=seed" json:"seed,omitempty"`
	Ack              []byte  `protobuf:"bytes,10,opt,name=ack" json:"ack,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NewAddressRequest) Reset()                    { *m = NewAddressRequest{} }
func (m *NewAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*NewAddressRequest) ProtoMessage()               {}
func (*NewAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NewAddressRequest) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *NewAddressRequest) GetAddressversion() uint32 {
	if m != nil && m.Addressversion != nil {
		return *m.Addressversion
	}
	return 0
}

func (m *NewAddressRequest) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *NewAddressRequest) GetStream() uint32 {
	if m != nil && m.Stream != nil {
		return *m.Stream
	}
	return 0
}

func (m *NewAddressRequest) GetPow() uint32 {
	if m != nil && m.Pow != nil {
		return *m.Pow
	}
	return 0
}

func (m *NewAddressRequest) GetExtrabytes() uint32 {
	if m != nil && m.Extrabytes != nil {
		return *m.Extrabytes
	}
	return 0
}

func (m *NewAddressRequest) GetDml() bool {
	if m != nil && m.Dml != nil {
		return *m.Dml
	}
	return false
}

func (m *NewAddressRequest) GetDeterministic() bool {
	if m != nil && m.Deterministic != nil {
		return *m.Deterministic
	}
	return false
}

func (m *NewAddressRequest) GetSeed() []byte {
	if m != nil {
		return m.Seed
	}
	return nil
}

func (m *NewAddressRequest) GetAck() []byte {
	if m != nil {
		return m.Ack
	}
	return nil
}

type BitmessageSelector struct {
	Version          *uint32          `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Address          *string          `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	Id               []string         `protobuf:"bytes,3,rep,name=id" json:"id,omitempty"`
	Type             *ReplySelector   `protobuf:"varint,4,opt,name=type,enum=rpc.ReplySelector" json:"type,omitempty"`
	Selector         *MessageSelector `protobuf:"varint,5,opt,name=selector,enum=rpc.MessageSelector" json:"selector,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *BitmessageSelector) Reset()                    { *m = BitmessageSelector{} }
func (m *BitmessageSelector) String() string            { return proto.CompactTextString(m) }
func (*BitmessageSelector) ProtoMessage()               {}
func (*BitmessageSelector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BitmessageSelector) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *BitmessageSelector) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *BitmessageSelector) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *BitmessageSelector) GetType() ReplySelector {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ReplySelector_REPLYSELECTOR_ERROR
}

func (m *BitmessageSelector) GetSelector() MessageSelector {
	if m != nil && m.Selector != nil {
		return *m.Selector
	}
	return MessageSelector_MESSAGESELECTOR_ERROR
}

type SendBitmessage struct {
	Version   *uint32  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Sender    *string  `protobuf:"bytes,2,opt,name=sender" json:"sender,omitempty"`
	Recipient []string `protobuf:"bytes,3,rep,name=recipient" json:"recipient,omitempty"`
	Broadcast *bool    `protobuf:"varint,4,opt,name=broadcast" json:"broadcast,omitempty"`
	Ttl       *uint64  `protobuf:"varint,5,opt,name=ttl" json:"ttl,omitempty"`
	// Types that are valid to be assigned to Contents:
	//	*SendBitmessage_Text
	Contents         isSendBitmessage_Contents `protobuf_oneof:"contents"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *SendBitmessage) Reset()                    { *m = SendBitmessage{} }
func (m *SendBitmessage) String() string            { return proto.CompactTextString(m) }
func (*SendBitmessage) ProtoMessage()               {}
func (*SendBitmessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isSendBitmessage_Contents interface {
	isSendBitmessage_Contents()
}

type SendBitmessage_Text struct {
	Text *TextBitmessage `protobuf:"bytes,6,opt,name=text,oneof"`
}

func (*SendBitmessage_Text) isSendBitmessage_Contents() {}

func (m *SendBitmessage) GetContents() isSendBitmessage_Contents {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *SendBitmessage) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *SendBitmessage) GetSender() string {
	if m != nil && m.Sender != nil {
		return *m.Sender
	}
	return ""
}

func (m *SendBitmessage) GetRecipient() []string {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *SendBitmessage) GetBroadcast() bool {
	if m != nil && m.Broadcast != nil {
		return *m.Broadcast
	}
	return false
}

func (m *SendBitmessage) GetTtl() uint64 {
	if m != nil && m.Ttl != nil {
		return *m.Ttl
	}
	return 0
}

func (m *SendBitmessage) GetText() *TextBitmessage {
	if x, ok := m.GetContents().(*SendBitmessage_Text); ok {
		return x.Text
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SendBitmessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SendBitmessage_OneofMarshaler, _SendBitmessage_OneofUnmarshaler, _SendBitmessage_OneofSizer, []interface{}{
		(*SendBitmessage_Text)(nil),
	}
}

func _SendBitmessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SendBitmessage)
	// contents
	switch x := m.Contents.(type) {
	case *SendBitmessage_Text:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Text); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SendBitmessage.Contents has unexpected type %T", x)
	}
	return nil
}

func _SendBitmessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SendBitmessage)
	switch tag {
	case 6: // contents.text
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TextBitmessage)
		err := b.DecodeMessage(msg)
		m.Contents = &SendBitmessage_Text{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SendBitmessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SendBitmessage)
	// contents
	switch x := m.Contents.(type) {
	case *SendBitmessage_Text:
		s := proto.Size(x.Text)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ListAddressesRequest struct {
	Version          *uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ListAddressesRequest) Reset()                    { *m = ListAddressesRequest{} }
func (m *ListAddressesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListAddressesRequest) ProtoMessage()               {}
func (*ListAddressesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListAddressesRequest) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

type NewAddressReply struct {
	Version          *uint32            `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Address          *BitmessageAddress `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *NewAddressReply) Reset()                    { *m = NewAddressReply{} }
func (m *NewAddressReply) String() string            { return proto.CompactTextString(m) }
func (*NewAddressReply) ProtoMessage()               {}
func (*NewAddressReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *NewAddressReply) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *NewAddressReply) GetAddress() *BitmessageAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

type ListAddressesReply struct {
	Version          *uint32              `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Addresses        []*BitmessageAddress `protobuf:"bytes,2,rep,name=addresses" json:"addresses,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *ListAddressesReply) Reset()                    { *m = ListAddressesReply{} }
func (m *ListAddressesReply) String() string            { return proto.CompactTextString(m) }
func (*ListAddressesReply) ProtoMessage()               {}
func (*ListAddressesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListAddressesReply) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *ListAddressesReply) GetAddresses() []*BitmessageAddress {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type BitmessageAddress struct {
	Version            *uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Address            *string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	Tag                *string `protobuf:"bytes,3,opt,name=tag" json:"tag,omitempty"`
	Addressversion     *uint64 `protobuf:"varint,4,opt,name=addressversion" json:"addressversion,omitempty"`
	Stream             *uint64 `protobuf:"varint,5,opt,name=stream" json:"stream,omitempty"`
	Behavior           *uint32 `protobuf:"varint,6,opt,name=behavior" json:"behavior,omitempty"`
	Noncetrialsperbyte *uint64 `protobuf:"varint,7,opt,name=noncetrialsperbyte" json:"noncetrialsperbyte,omitempty"`
	Extrabytes         *uint64 `protobuf:"varint,8,opt,name=extrabytes" json:"extrabytes,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *BitmessageAddress) Reset()                    { *m = BitmessageAddress{} }
func (m *BitmessageAddress) String() string            { return proto.CompactTextString(m) }
func (*BitmessageAddress) ProtoMessage()               {}
func (*BitmessageAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *BitmessageAddress) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *BitmessageAddress) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *BitmessageAddress) GetTag() string {
	if m != nil && m.Tag != nil {
		return *m.Tag
	}
	return ""
}

func (m *BitmessageAddress) GetAddressversion() uint64 {
	if m != nil && m.Addressversion != nil {
		return *m.Addressversion
	}
	return 0
}

func (m *BitmessageAddress) GetStream() uint64 {
	if m != nil && m.Stream != nil {
		return *m.Stream
	}
	return 0
}

func (m *BitmessageAddress) GetBehavior() uint32 {
	if m != nil && m.Behavior != nil {
		return *m.Behavior
	}
	return 0
}

func (m *BitmessageAddress) GetNoncetrialsperbyte() uint64 {
	if m != nil && m.Noncetrialsperbyte != nil {
		return *m.Noncetrialsperbyte
	}
	return 0
}

func (m *BitmessageAddress) GetExtrabytes() uint64 {
	if m != nil && m.Extrabytes != nil {
		return *m.Extrabytes
	}
	return 0
}

type Bitmessage struct {
	Version   *uint32         `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Id        *string         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Sender    *string         `protobuf:"bytes,3,opt,name=sender" json:"sender,omitempty"`
	Recipient *string         `protobuf:"bytes,4,opt,name=recipient" json:"recipient,omitempty"`
	Type      *BitmessageType `protobuf:"varint,5,opt,name=type,enum=rpc.BitmessageType" json:"type,omitempty"`
	// Types that are valid to be assigned to Body:
	//	*Bitmessage_Text
	Body             isBitmessage_Body `protobuf_oneof:"body"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Bitmessage) Reset()                    { *m = Bitmessage{} }
func (m *Bitmessage) String() string            { return proto.CompactTextString(m) }
func (*Bitmessage) ProtoMessage()               {}
func (*Bitmessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type isBitmessage_Body interface {
	isBitmessage_Body()
}

type Bitmessage_Text struct {
	Text *TextBitmessage `protobuf:"bytes,6,opt,name=text,oneof"`
}

func (*Bitmessage_Text) isBitmessage_Body() {}

func (m *Bitmessage) GetBody() isBitmessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Bitmessage) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *Bitmessage) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Bitmessage) GetSender() string {
	if m != nil && m.Sender != nil {
		return *m.Sender
	}
	return ""
}

func (m *Bitmessage) GetRecipient() string {
	if m != nil && m.Recipient != nil {
		return *m.Recipient
	}
	return ""
}

func (m *Bitmessage) GetType() BitmessageType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return BitmessageType_BITMESSAGE_ERROR
}

func (m *Bitmessage) GetText() *TextBitmessage {
	if x, ok := m.GetBody().(*Bitmessage_Text); ok {
		return x.Text
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Bitmessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Bitmessage_OneofMarshaler, _Bitmessage_OneofUnmarshaler, _Bitmessage_OneofSizer, []interface{}{
		(*Bitmessage_Text)(nil),
	}
}

func _Bitmessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Bitmessage)
	// body
	switch x := m.Body.(type) {
	case *Bitmessage_Text:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Text); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Bitmessage.Body has unexpected type %T", x)
	}
	return nil
}

func _Bitmessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Bitmessage)
	switch tag {
	case 6: // body.text
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TextBitmessage)
		err := b.DecodeMessage(msg)
		m.Body = &Bitmessage_Text{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Bitmessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Bitmessage)
	// body
	switch x := m.Body.(type) {
	case *Bitmessage_Text:
		s := proto.Size(x.Text)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TextBitmessage struct {
	Version          *uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Subject          *string `protobuf:"bytes,2,opt,name=subject" json:"subject,omitempty"`
	Contents         *string `protobuf:"bytes,3,opt,name=contents" json:"contents,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TextBitmessage) Reset()                    { *m = TextBitmessage{} }
func (m *TextBitmessage) String() string            { return proto.CompactTextString(m) }
func (*TextBitmessage) ProtoMessage()               {}
func (*TextBitmessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *TextBitmessage) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *TextBitmessage) GetSubject() string {
	if m != nil && m.Subject != nil {
		return *m.Subject
	}
	return ""
}

func (m *TextBitmessage) GetContents() string {
	if m != nil && m.Contents != nil {
		return *m.Contents
	}
	return ""
}

type HelpRequest struct {
	Version          *uint32       `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Requests         []RequestType `protobuf:"varint,2,rep,name=requests,enum=rpc.RequestType" json:"requests,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *HelpRequest) Reset()                    { *m = HelpRequest{} }
func (m *HelpRequest) String() string            { return proto.CompactTextString(m) }
func (*HelpRequest) ProtoMessage()               {}
func (*HelpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *HelpRequest) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *HelpRequest) GetRequests() []RequestType {
	if m != nil {
		return m.Requests
	}
	return nil
}

type HelpResponse struct {
	Version          *uint32  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Instructions     []string `protobuf:"bytes,2,rep,name=instructions" json:"instructions,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *HelpResponse) Reset()                    { *m = HelpResponse{} }
func (m *HelpResponse) String() string            { return proto.CompactTextString(m) }
func (*HelpResponse) ProtoMessage()               {}
func (*HelpResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *HelpResponse) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *HelpResponse) GetInstructions() []string {
	if m != nil {
		return m.Instructions
	}
	return nil
}

func init() {
	proto.RegisterType((*BitmessageRPC)(nil), "rpc.BitmessageRPC")
	proto.RegisterType((*BMRPCRequest)(nil), "rpc.BMRPCRequest")
	proto.RegisterType((*BMRPCReply)(nil), "rpc.BMRPCReply")
	proto.RegisterType((*ErrorReply)(nil), "rpc.ErrorReply")
	proto.RegisterType((*BMRPCPush)(nil), "rpc.BMRPCPush")
	proto.RegisterType((*NewAddressRequest)(nil), "rpc.NewAddressRequest")
	proto.RegisterType((*BitmessageSelector)(nil), "rpc.BitmessageSelector")
	proto.RegisterType((*SendBitmessage)(nil), "rpc.SendBitmessage")
	proto.RegisterType((*ListAddressesRequest)(nil), "rpc.ListAddressesRequest")
	proto.RegisterType((*NewAddressReply)(nil), "rpc.NewAddressReply")
	proto.RegisterType((*ListAddressesReply)(nil), "rpc.ListAddressesReply")
	proto.RegisterType((*BitmessageAddress)(nil), "rpc.BitmessageAddress")
	proto.RegisterType((*Bitmessage)(nil), "rpc.Bitmessage")
	proto.RegisterType((*TextBitmessage)(nil), "rpc.TextBitmessage")
	proto.RegisterType((*HelpRequest)(nil), "rpc.HelpRequest")
	proto.RegisterType((*HelpResponse)(nil), "rpc.HelpResponse")
	proto.RegisterEnum("rpc.BitmessageRPCType", BitmessageRPCType_name, BitmessageRPCType_value)
	proto.RegisterEnum("rpc.RequestType", RequestType_name, RequestType_value)
	proto.RegisterEnum("rpc.BitmessageReplyStatus", BitmessageReplyStatus_name, BitmessageReplyStatus_value)
	proto.RegisterEnum("rpc.BitmessageType", BitmessageType_name, BitmessageType_value)
	proto.RegisterEnum("rpc.MessageSelector", MessageSelector_name, MessageSelector_value)
	proto.RegisterEnum("rpc.ReplySelector", ReplySelector_name, ReplySelector_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for BMAgentRPC service

type BMAgentRPCClient interface {
	BMAgentRequest(ctx context.Context, in *BMRPCRequest, opts ...grpc.CallOption) (*BMRPCReply, error)
}

type bMAgentRPCClient struct {
	cc *grpc.ClientConn
}

func NewBMAgentRPCClient(cc *grpc.ClientConn) BMAgentRPCClient {
	return &bMAgentRPCClient{cc}
}

func (c *bMAgentRPCClient) BMAgentRequest(ctx context.Context, in *BMRPCRequest, opts ...grpc.CallOption) (*BMRPCReply, error) {
	out := new(BMRPCReply)
	err := grpc.Invoke(ctx, "/rpc.BMAgentRPC/BMAgentRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BMAgentRPC service

type BMAgentRPCServer interface {
	BMAgentRequest(context.Context, *BMRPCRequest) (*BMRPCReply, error)
}

func RegisterBMAgentRPCServer(s *grpc.Server, srv BMAgentRPCServer) {
	s.RegisterService(&_BMAgentRPC_serviceDesc, srv)
}

func _BMAgentRPC_BMAgentRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BMRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BMAgentRPCServer).BMAgentRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BMAgentRPC/BMAgentRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BMAgentRPCServer).BMAgentRequest(ctx, req.(*BMRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BMAgentRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.BMAgentRPC",
	HandlerType: (*BMAgentRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BMAgentRequest",
			Handler:    _BMAgentRPC_BMAgentRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x57, 0xdb, 0x6e, 0xdb, 0x46,
	0x13, 0x8e, 0x44, 0x5a, 0x87, 0xb1, 0x24, 0x2b, 0x1b, 0xc7, 0x61, 0x8c, 0x20, 0x08, 0x88, 0x1f,
	0xc9, 0x5f, 0xa3, 0x0d, 0x52, 0xa3, 0x08, 0x7a, 0xd1, 0xa2, 0xa0, 0x24, 0xc6, 0x16, 0x2a, 0x4b,
	0xee, 0x52, 0xca, 0xa1, 0x40, 0x0f, 0x94, 0xb4, 0x70, 0xd8, 0xc8, 0x22, 0x4b, 0x52, 0x49, 0x7d,
	0x53, 0xa0, 0x17, 0x7d, 0x82, 0xbe, 0x49, 0x5f, 0xa2, 0x7d, 0x8a, 0xa2, 0xcf, 0xd1, 0xab, 0xce,
	0x2e, 0x97, 0xe2, 0x41, 0x0a, 0xdb, 0xf4, 0x4a, 0xbb, 0x73, 0xda, 0x99, 0xf9, 0xbe, 0xd9, 0xa5,
	0xa0, 0xee, 0x7b, 0xb3, 0x87, 0x9e, 0xef, 0x86, 0x2e, 0x51, 0x70, 0xa9, 0xff, 0x51, 0x82, 0x66,
	0xc7, 0x09, 0x2f, 0x59, 0x10, 0xd8, 0x17, 0x8c, 0x9e, 0x77, 0x89, 0x06, 0xd5, 0xd7, 0xcc, 0x0f,
	0x1c, 0x77, 0xa9, 0x95, 0xee, 0x95, 0xfe, 0xdf, 0xa4, 0xf1, 0x96, 0x1c, 0x81, 0x1a, 0x5e, 0x79,
	0x4c, 0x2b, 0xa3, 0xb8, 0x75, 0x7c, 0xf0, 0x90, 0x87, 0xca, 0xf8, 0x8e, 0x51, 0x4b, 0x85, 0x0d,
	0xf9, 0x00, 0xaa, 0x3e, 0xfb, 0x7e, 0xc5, 0x82, 0x50, 0x53, 0xd0, 0x7c, 0xf7, 0xf8, 0x7a, 0x64,
	0x7e, 0x86, 0x66, 0x34, 0x52, 0x9c, 0x5e, 0xa3, 0xb1, 0x0d, 0x79, 0x00, 0x3b, 0x3e, 0xf3, 0x16,
	0x57, 0x9a, 0x2a, 0x8c, 0xf7, 0xd2, 0xc6, 0x28, 0x46, 0xd3, 0x48, 0x4f, 0xfe, 0x07, 0xaa, 0xb7,
	0x0a, 0x5e, 0x6a, 0x3b, 0xc2, 0xae, 0x95, 0xd8, 0x9d, 0xa3, 0x14, 0xcd, 0x84, 0xb6, 0x53, 0x87,
	0xaa, 0x67, 0x5f, 0x2d, 0x5c, 0x7b, 0xae, 0xff, 0xa9, 0x40, 0x23, 0x7d, 0x6a, 0x41, 0x7d, 0x2d,
	0x28, 0x3b, 0x73, 0x51, 0x5d, 0x9d, 0xe2, 0x8a, 0x1c, 0x40, 0x65, 0xe6, 0xba, 0xaf, 0x1c, 0x26,
	0x4a, 0x68, 0x50, 0xb9, 0xe3, 0x72, 0x6f, 0x35, 0x7d, 0xc5, 0xa2, 0x6c, 0x51, 0x1e, 0xed, 0x78,
	0x6e, 0xa2, 0x3f, 0x3b, 0xa2, 0x3f, 0x6d, 0x91, 0x9b, 0x3c, 0x35, 0xd5, 0x99, 0x3b, 0x50, 0x0f,
	0x9c, 0x8b, 0xa5, 0x1d, 0xae, 0x7c, 0xa6, 0x55, 0x44, 0x80, 0x44, 0x40, 0x3e, 0x06, 0x58, 0xb2,
	0x37, 0xf6, 0x7c, 0xee, 0x63, 0x57, 0xb5, 0xba, 0xa8, 0x32, 0xea, 0xf4, 0x90, 0xbd, 0x31, 0x22,
	0x71, 0xd2, 0xbf, 0x94, 0x2d, 0xe9, 0xc2, 0x9e, 0x44, 0x22, 0x60, 0x0b, 0x36, 0x0b, 0x5d, 0x5f,
	0x03, 0xe1, 0x7e, 0x2b, 0x07, 0x94, 0x25, 0xd5, 0xe8, 0x9f, 0xf7, 0x20, 0x9f, 0x42, 0x2b, 0x60,
	0xcb, 0xf9, 0x74, 0x6d, 0xac, 0xed, 0x8a, 0x18, 0x37, 0x44, 0x0c, 0x0b, 0x55, 0x49, 0x1c, 0xf4,
	0xcf, 0x19, 0x93, 0xfb, 0xa0, 0xbe, 0x64, 0x0b, 0x4f, 0x6b, 0x08, 0xa7, 0xa8, 0x03, 0xa7, 0x28,
	0x48, 0x32, 0x16, 0x7a, 0x62, 0x40, 0x73, 0xe1, 0x04, 0xa1, 0x4c, 0x9d, 0x05, 0x5a, 0x53, 0x38,
	0xdc, 0x16, 0x0e, 0x03, 0xd4, 0x18, 0xb1, 0x26, 0xf1, 0xcc, 0x7a, 0x70, 0x88, 0x25, 0x79, 0xf4,
	0x9f, 0x14, 0x80, 0x84, 0x2b, 0xef, 0x00, 0x30, 0x42, 0x21, 0x63, 0xa0, 0x58, 0x11, 0xe2, 0x44,
	0xb0, 0x86, 0x53, 0x2d, 0x84, 0xf3, 0x18, 0x2a, 0x98, 0x56, 0xb8, 0x0a, 0x24, 0xec, 0x87, 0xf9,
	0xb1, 0xe0, 0x39, 0x59, 0xc2, 0x82, 0x4a, 0xcb, 0x7f, 0xa0, 0xc0, 0x87, 0x00, 0xcc, 0xf7, 0x5d,
	0x5f, 0x78, 0x6a, 0xb5, 0xd4, 0x40, 0x98, 0x6b, 0x31, 0xc7, 0x3e, 0x31, 0x22, 0x8f, 0xb7, 0xb0,
	0x66, 0x7f, 0x83, 0x35, 0xd2, 0x2f, 0xc5, 0x99, 0xcf, 0xf2, 0x38, 0xa4, 0x19, 0x93, 0xc3, 0x21,
	0xf2, 0xce, 0xa1, 0x50, 0x95, 0x73, 0xab, 0x7f, 0x02, 0x90, 0x64, 0x57, 0x00, 0xc1, 0x3e, 0xec,
	0x88, 0xbc, 0x25, 0x0a, 0xd1, 0x46, 0x3f, 0x87, 0xfa, 0x7a, 0x88, 0x0b, 0x9c, 0xdf, 0x83, 0x6a,
	0x4c, 0xcb, 0xda, 0x3d, 0x25, 0xb9, 0x27, 0x92, 0x66, 0xc7, 0x7a, 0xfd, 0x97, 0x32, 0x5c, 0xdf,
	0x98, 0x98, 0x82, 0xd0, 0xf7, 0xa1, 0x25, 0xab, 0x8a, 0x0d, 0xca, 0xc2, 0x20, 0x27, 0xe5, 0xf9,
	0x2f, 0xec, 0x29, 0x5b, 0x48, 0xba, 0x44, 0x1b, 0x7e, 0x23, 0x04, 0xa1, 0xcf, 0xec, 0x4b, 0x41,
	0x96, 0x26, 0x95, 0x3b, 0xd2, 0x06, 0xc5, 0x73, 0xdf, 0x08, 0x66, 0x34, 0x29, 0x5f, 0x92, 0xbb,
	0x08, 0xee, 0x0f, 0xa1, 0x6f, 0x4f, 0xaf, 0x42, 0x6c, 0x77, 0x45, 0x28, 0x52, 0x12, 0xee, 0x31,
	0xbf, 0x5c, 0x68, 0x55, 0x54, 0xd4, 0x28, 0x5f, 0x22, 0x0d, 0x9b, 0x73, 0x16, 0x32, 0xff, 0xd2,
	0x59, 0x62, 0xeb, 0x9d, 0x99, 0x60, 0x44, 0x8d, 0x66, 0x85, 0x84, 0x80, 0x1a, 0x30, 0x36, 0x17,
	0xd8, 0x37, 0xa8, 0x58, 0xf3, 0x58, 0xf6, 0xec, 0x95, 0xc0, 0xb4, 0x41, 0xf9, 0x52, 0xff, 0xb5,
	0x04, 0x64, 0xf3, 0x22, 0x28, 0x68, 0x0b, 0x6a, 0x62, 0x56, 0x45, 0x80, 0xc5, 0x5b, 0x39, 0x4b,
	0x0a, 0xc2, 0x10, 0xcd, 0xd2, 0xfd, 0xcc, 0xb4, 0x10, 0x39, 0x2d, 0x9c, 0xfb, 0xf2, 0x14, 0x39,
	0x2f, 0x8f, 0xa0, 0xb6, 0xbe, 0x9f, 0xa2, 0x89, 0x89, 0x88, 0x7a, 0x96, 0xcd, 0x89, 0xae, 0xad,
	0xf4, 0xdf, 0x4a, 0xd0, 0xca, 0xde, 0x3c, 0x05, 0x09, 0x73, 0x24, 0xd0, 0x96, 0xc5, 0x04, 0x93,
	0xbb, 0x68, 0xd4, 0x67, 0x8e, 0xe7, 0xb0, 0x65, 0x28, 0xb3, 0x4e, 0x04, 0x5c, 0x3b, 0xf5, 0xf1,
	0xb5, 0x98, 0xd9, 0xf8, 0x5e, 0xa9, 0xa2, 0xbf, 0x89, 0x80, 0xf7, 0x31, 0x0c, 0x17, 0x22, 0x5b,
	0x95, 0xf2, 0x25, 0x12, 0x51, 0x0d, 0x11, 0x34, 0x81, 0x5f, 0x7c, 0x39, 0x8e, 0x51, 0x90, 0xb9,
	0x1c, 0x85, 0x49, 0x07, 0xa0, 0x36, 0x73, 0x97, 0x21, 0x9e, 0x12, 0xe8, 0x8f, 0x60, 0x7f, 0xdb,
	0xe5, 0xf6, 0xf6, 0x72, 0xf4, 0xaf, 0x60, 0x2f, 0x37, 0xc1, 0x05, 0xb5, 0x3f, 0xca, 0x82, 0xb5,
	0xbb, 0xf1, 0x44, 0xc7, 0x71, 0x62, 0x33, 0x7d, 0x0e, 0x64, 0x73, 0xca, 0x0b, 0x4e, 0xf8, 0x08,
	0xea, 0xc9, 0x5d, 0x51, 0x16, 0x23, 0xf8, 0xb6, 0x33, 0x12, 0x43, 0xfd, 0x67, 0x9c, 0xc5, 0x0d,
	0x83, 0xff, 0x44, 0x3a, 0x8e, 0x84, 0x7d, 0x21, 0x67, 0x8f, 0x2f, 0xb7, 0xcc, 0xad, 0x2a, 0x60,
	0xca, 0xcf, 0x6d, 0x32, 0xa1, 0x11, 0x8c, 0xf1, 0x84, 0x1e, 0x42, 0x6d, 0xca, 0x5e, 0xda, 0xaf,
	0x1d, 0xa4, 0x63, 0x34, 0x8d, 0xeb, 0x3d, 0x79, 0x08, 0x64, 0xe9, 0x2e, 0x67, 0x2c, 0xf4, 0x1d,
	0x7b, 0x11, 0x78, 0xcc, 0xe7, 0x23, 0x2a, 0x46, 0x53, 0xa5, 0x5b, 0x34, 0xb9, 0xd9, 0xae, 0x09,
	0xbb, 0x94, 0x44, 0xff, 0xbd, 0x84, 0xef, 0xd4, 0xbf, 0x21, 0xf1, 0x96, 0x0f, 0x11, 0x49, 0x6a,
	0xe5, 0xed, 0xa4, 0x56, 0xe3, 0xf7, 0x2b, 0x26, 0xf5, 0x83, 0xcc, 0xe7, 0xc8, 0x8d, 0x1c, 0x4e,
	0xa9, 0x27, 0xec, 0x1d, 0xd8, 0x5c, 0x01, 0x75, 0xea, 0xce, 0xaf, 0xf4, 0x6f, 0xa1, 0x95, 0xb5,
	0x28, 0x86, 0x33, 0x58, 0x4d, 0xbf, 0xc3, 0x61, 0x8e, 0xe1, 0x94, 0x5b, 0xde, 0xfc, 0x78, 0x36,
	0x64, 0x65, 0xc9, 0xac, 0x4c, 0x60, 0x37, 0xf5, 0xe5, 0x50, 0x10, 0xfe, 0x7d, 0xa8, 0xc9, 0x37,
	0x3b, 0xa2, 0xe4, 0xb6, 0xa7, 0x7a, 0x6d, 0xa1, 0x0f, 0xa0, 0x11, 0x85, 0x0d, 0x3c, 0x77, 0x19,
	0x14, 0xa5, 0xad, 0x43, 0xc3, 0x59, 0x22, 0x4b, 0x56, 0xb3, 0x10, 0xb7, 0x51, 0xec, 0x3a, 0xcd,
	0xc8, 0x8e, 0xbe, 0x4e, 0x13, 0x5b, 0x7e, 0x00, 0x93, 0x3d, 0xd8, 0x15, 0x8f, 0xd9, 0x37, 0x26,
	0xa5, 0x23, 0xda, 0xbe, 0x46, 0xae, 0xe3, 0x27, 0xb6, 0x10, 0x50, 0xf3, 0x8b, 0x89, 0x69, 0x8d,
	0xdb, 0xa5, 0xc4, 0x86, 0x9a, 0xe7, 0x83, 0x17, 0xed, 0x32, 0xbe, 0x2b, 0xed, 0x48, 0x70, 0x3e,
	0xb1, 0x4e, 0x87, 0xa3, 0x71, 0xff, 0xc9, 0x8b, 0xb6, 0x72, 0xe4, 0xc1, 0x6e, 0xaa, 0x0c, 0x52,
	0x87, 0x9d, 0x38, 0x66, 0x0d, 0xd4, 0x53, 0x73, 0x70, 0x8e, 0xa1, 0x5a, 0x00, 0x43, 0xf3, 0x99,
	0xd1, 0xeb, 0x51, 0xd3, 0xb2, 0x30, 0x12, 0x86, 0x3e, 0x31, 0xc7, 0x67, 0xb8, 0x31, 0x4e, 0x4c,
	0xab, 0xad, 0xe0, 0xd3, 0xd0, 0xea, 0x99, 0x03, 0x73, 0x6c, 0xae, 0x65, 0x2a, 0x69, 0x42, 0xdd,
	0x9a, 0x74, 0xac, 0x2e, 0xed, 0x77, 0xcc, 0xf6, 0x0e, 0x8f, 0x66, 0x99, 0xc3, 0x5e, 0xbb, 0x72,
	0xf4, 0x23, 0xdc, 0xdc, 0xfa, 0xed, 0x42, 0x6e, 0x62, 0xa9, 0x3c, 0x41, 0x6b, 0x6c, 0x8c, 0x27,
	0xd6, 0xba, 0xb6, 0x5b, 0x70, 0x23, 0x2d, 0xb6, 0x26, 0xdd, 0x2e, 0x4f, 0xa3, 0x84, 0xdc, 0xd4,
	0xd2, 0x8a, 0xc9, 0xd0, 0x98, 0x8c, 0x4f, 0x47, 0xb4, 0xff, 0xa5, 0xd9, 0xc3, 0x24, 0x73, 0x6e,
	0xfd, 0xe1, 0x53, 0x63, 0xd0, 0xef, 0x61, 0xc5, 0xcf, 0xa1, 0x95, 0xe5, 0xa8, 0xe8, 0x4c, 0x3f,
	0xae, 0x67, 0x7d, 0xee, 0x01, 0x3e, 0x64, 0x89, 0x54, 0xfe, 0xe2, 0xb1, 0x1a, 0xec, 0xa7, 0xe4,
	0x1d, 0x3a, 0x32, 0x7a, 0x5d, 0x03, 0x5b, 0x5e, 0x3e, 0xfa, 0xab, 0x04, 0x7b, 0xb9, 0x47, 0x86,
	0xdc, 0x86, 0x9b, 0x71, 0x53, 0xb0, 0x43, 0xdd, 0xf1, 0x88, 0xae, 0x0f, 0xb8, 0x0b, 0x87, 0x79,
	0x55, 0x7f, 0xd8, 0xeb, 0x3f, 0xed, 0xf7, 0x26, 0xc6, 0x00, 0x0f, 0x3a, 0x84, 0x83, 0xbc, 0x7e,
	0x32, 0xa4, 0xa6, 0xc1, 0xab, 0xc3, 0x24, 0xf2, 0x3a, 0xa1, 0x51, 0x78, 0x57, 0x36, 0xa3, 0x76,
	0x47, 0x67, 0xfd, 0xe1, 0x09, 0xa2, 0xb2, 0xc5, 0x0f, 0x61, 0x19, 0x23, 0x40, 0xf7, 0xe0, 0x4e,
	0x5e, 0x63, 0x74, 0x3f, 0x1f, 0x8e, 0x9e, 0x0d, 0xcc, 0xde, 0x09, 0x76, 0xb4, 0xb2, 0x2d, 0xf2,
	0x68, 0x32, 0x3e, 0x19, 0xf1, 0xc8, 0xd5, 0xa3, 0x17, 0xd0, 0xcc, 0x3c, 0xc6, 0x1c, 0x00, 0x41,
	0xbd, 0x8d, 0xba, 0x37, 0x14, 0x58, 0xb5, 0xf9, 0x1c, 0x0b, 0xc6, 0x8e, 0x67, 0x15, 0x4f, 0x26,
	0x83, 0x41, 0xbb, 0x7c, 0xdc, 0xe3, 0x1f, 0xdf, 0xc6, 0x05, 0x0e, 0x2d, 0xff, 0xf7, 0xf8, 0x18,
	0xf1, 0x93, 0x3b, 0x39, 0xb9, 0x9b, 0x7f, 0xfc, 0x0e, 0xf3, 0x7f, 0xef, 0xf4, 0x6b, 0x9d, 0xf2,
	0xa9, 0xf2, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xb4, 0x2d, 0xf3, 0x9c, 0x0e, 0x00, 0x00,
}
