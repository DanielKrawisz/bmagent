// Code generated by protoc-gen-go.
// source: encoding.proto
// DO NOT EDIT!

/*
Package serialize is a generated protocol buffer package.

It is generated from these files:
	encoding.proto

It has these top-level messages:
	Message
	MessageState
	ImapData
	Encoding
*/
package serialize

import proto "github.com/golang/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

// Message is a bitmessage.
type Message struct {
	Encoding   *Encoding     `protobuf:"bytes,1,opt,name=encoding" json:"encoding,omitempty"`
	From       string        `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	To         string        `protobuf:"bytes,3,opt,name=to" json:"to,omitempty"`
	OfChannel  bool          `protobuf:"varint,4,opt,name=of_channel" json:"of_channel,omitempty"`
	Expiration string        `protobuf:"bytes,5,opt,name=expiration" json:"expiration,omitempty"`
	Ack        []byte        `protobuf:"bytes,6,opt,name=ack,proto3" json:"ack,omitempty"`
	ImapData   *ImapData     `protobuf:"bytes,7,opt,name=imap_data" json:"imap_data,omitempty"`
	Object     []byte        `protobuf:"bytes,8,opt,name=object,proto3" json:"object,omitempty"`
	State      *MessageState `protobuf:"bytes,9,opt,name=state" json:"state,omitempty"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}

func (m *Message) GetEncoding() *Encoding {
	if m != nil {
		return m.Encoding
	}
	return nil
}

func (m *Message) GetImapData() *ImapData {
	if m != nil {
		return m.ImapData
	}
	return nil
}

func (m *Message) GetState() *MessageState {
	if m != nil {
		return m.State
	}
	return nil
}

// MessageState is the state of the message.
type MessageState struct {
	PubkeyRequested bool   `protobuf:"varint,1,opt,name=pubkey_requested" json:"pubkey_requested,omitempty"`
	PowIndex        uint64 `protobuf:"varint,2,opt,name=pow_index" json:"pow_index,omitempty"`
	AckPowIndex     uint64 `protobuf:"varint,3,opt,name=ack_pow_index" json:"ack_pow_index,omitempty"`
	SendTries       uint32 `protobuf:"varint,4,opt,name=send_tries" json:"send_tries,omitempty"`
	LastSend        string `protobuf:"bytes,5,opt,name=last_send" json:"last_send,omitempty"`
	AckReceived     bool   `protobuf:"varint,6,opt,name=ack_received" json:"ack_received,omitempty"`
	AckExpected     bool   `protobuf:"varint,7,opt,name=ack_expected" json:"ack_expected,omitempty"`
	Received        bool   `protobuf:"varint,8,opt,name=received" json:"received,omitempty"`
}

func (m *MessageState) Reset()         { *m = MessageState{} }
func (m *MessageState) String() string { return proto.CompactTextString(m) }
func (*MessageState) ProtoMessage()    {}

// ImapData is an entry in the database that contains a message and
// some related metadata.
type ImapData struct {
	TimeReceived string `protobuf:"bytes,1,opt,name=time_received" json:"time_received,omitempty"`
	Flags        int32  `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
}

func (m *ImapData) Reset()         { *m = ImapData{} }
func (m *ImapData) String() string { return proto.CompactTextString(m) }
func (*ImapData) ProtoMessage()    {}

// Encoding a bitmessage object payload.
type Encoding struct {
	Format  uint64 `protobuf:"varint,1,opt,name=format" json:"format,omitempty"`
	Subject []byte `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Body    []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Encoding) Reset()         { *m = Encoding{} }
func (m *Encoding) String() string { return proto.CompactTextString(m) }
func (*Encoding) ProtoMessage()    {}
