// Code generated by protoc-gen-go.
// source: encoding.proto
// DO NOT EDIT!

/*
Package serialize is a generated protocol buffer package.

It is generated from these files:
	encoding.proto

It has these top-level messages:
	Message
	MessageState
	ImapData
	Encoding
*/
package serialize

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Format int32

const (
	Format_UNUSED    Format = 0
	Format_ENCODING1 Format = 1
	Format_ENCODING2 Format = 2
)

var Format_name = map[int32]string{
	0: "UNUSED",
	1: "ENCODING1",
	2: "ENCODING2",
}
var Format_value = map[string]int32{
	"UNUSED":    0,
	"ENCODING1": 1,
	"ENCODING2": 2,
}

func (x Format) String() string {
	return proto.EnumName(Format_name, int32(x))
}
func (Format) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Message is a bitmessage.
type Message struct {
	Encoding   *Encoding     `protobuf:"bytes,1,opt,name=encoding" json:"encoding,omitempty"`
	From       string        `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	To         string        `protobuf:"bytes,3,opt,name=to" json:"to,omitempty"`
	OfChannel  bool          `protobuf:"varint,4,opt,name=of_channel,json=ofChannel" json:"of_channel,omitempty"`
	Expiration string        `protobuf:"bytes,5,opt,name=expiration" json:"expiration,omitempty"`
	Ack        []byte        `protobuf:"bytes,6,opt,name=ack,proto3" json:"ack,omitempty"`
	ImapData   *ImapData     `protobuf:"bytes,7,opt,name=imap_data,json=imapData" json:"imap_data,omitempty"`
	Object     []byte        `protobuf:"bytes,8,opt,name=object,proto3" json:"object,omitempty"`
	State      *MessageState `protobuf:"bytes,9,opt,name=state" json:"state,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetEncoding() *Encoding {
	if m != nil {
		return m.Encoding
	}
	return nil
}

func (m *Message) GetImapData() *ImapData {
	if m != nil {
		return m.ImapData
	}
	return nil
}

func (m *Message) GetState() *MessageState {
	if m != nil {
		return m.State
	}
	return nil
}

// MessageState is the state of the message.
type MessageState struct {
	PubkeyRequested bool   `protobuf:"varint,1,opt,name=pubkey_requested,json=pubkeyRequested" json:"pubkey_requested,omitempty"`
	SendTries       uint32 `protobuf:"varint,4,opt,name=send_tries,json=sendTries" json:"send_tries,omitempty"`
	LastSend        string `protobuf:"bytes,5,opt,name=last_send,json=lastSend" json:"last_send,omitempty"`
	AckReceived     bool   `protobuf:"varint,6,opt,name=ack_received,json=ackReceived" json:"ack_received,omitempty"`
	AckExpected     bool   `protobuf:"varint,7,opt,name=ack_expected,json=ackExpected" json:"ack_expected,omitempty"`
	Received        bool   `protobuf:"varint,8,opt,name=received" json:"received,omitempty"`
}

func (m *MessageState) Reset()                    { *m = MessageState{} }
func (m *MessageState) String() string            { return proto.CompactTextString(m) }
func (*MessageState) ProtoMessage()               {}
func (*MessageState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// ImapData is an entry in the database that contains a message and
// some related metadata.
type ImapData struct {
	TimeReceived string `protobuf:"bytes,1,opt,name=time_received,json=timeReceived" json:"time_received,omitempty"`
	Flags        int32  `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
}

func (m *ImapData) Reset()                    { *m = ImapData{} }
func (m *ImapData) String() string            { return proto.CompactTextString(m) }
func (*ImapData) ProtoMessage()               {}
func (*ImapData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Encoding a bitmessage object payload.
type Encoding struct {
	Format  Format `protobuf:"varint,1,opt,name=format,enum=Format" json:"format,omitempty"`
	Subject []byte `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Body    []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Encoding) Reset()                    { *m = Encoding{} }
func (m *Encoding) String() string            { return proto.CompactTextString(m) }
func (*Encoding) ProtoMessage()               {}
func (*Encoding) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Message)(nil), "Message")
	proto.RegisterType((*MessageState)(nil), "MessageState")
	proto.RegisterType((*ImapData)(nil), "ImapData")
	proto.RegisterType((*Encoding)(nil), "Encoding")
	proto.RegisterEnum("Format", Format_name, Format_value)
}

func init() { proto.RegisterFile("encoding.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x92, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0x49, 0x76, 0x9b, 0x38, 0xd3, 0xb4, 0x44, 0x23, 0x84, 0x2c, 0x10, 0xff, 0x8a, 0x40,
	0xc0, 0xa1, 0x12, 0xe5, 0x0d, 0xd8, 0x06, 0xb4, 0x07, 0x8a, 0xe4, 0xb2, 0x07, 0xb8, 0x44, 0x6e,
	0xe2, 0x14, 0xb3, 0x6d, 0x5c, 0x12, 0x17, 0xb1, 0x3c, 0x02, 0x2f, 0xc8, 0xeb, 0xe0, 0x38, 0x4e,
	0xb6, 0xb7, 0xf9, 0x7e, 0x33, 0x93, 0xc9, 0x37, 0x1e, 0x98, 0x8a, 0x2a, 0x57, 0x85, 0xac, 0xb6,
	0xf3, 0x43, 0xad, 0xb4, 0x9a, 0xfd, 0xf5, 0x21, 0xfc, 0x24, 0x9a, 0x86, 0x6f, 0x05, 0xbe, 0x00,
	0xd2, 0x67, 0xa9, 0xf7, 0xd4, 0x7b, 0x35, 0x5e, 0x44, 0xf3, 0xd4, 0x01, 0x36, 0xa4, 0x10, 0xe1,
	0xbc, 0xac, 0xd5, 0x9e, 0xfa, 0xa6, 0x24, 0x62, 0x36, 0xc6, 0x29, 0xf8, 0x5a, 0xd1, 0x33, 0x4b,
	0x4c, 0x84, 0x8f, 0x00, 0x54, 0x99, 0xe5, 0xdf, 0x79, 0x55, 0x89, 0x1d, 0x3d, 0x37, 0x9c, 0xb0,
	0x48, 0x95, 0x17, 0x1d, 0xc0, 0xc7, 0x00, 0xe2, 0xf7, 0x41, 0xd6, 0x5c, 0x4b, 0x55, 0xd1, 0x91,
	0x6d, 0x3b, 0x21, 0x98, 0xc0, 0x19, 0xcf, 0xaf, 0x69, 0x60, 0x12, 0x31, 0x6b, 0x43, 0x7c, 0x09,
	0x91, 0xdc, 0xf3, 0x43, 0x56, 0x70, 0xcd, 0x69, 0xe8, 0x7e, 0xee, 0xd2, 0x90, 0xa5, 0x01, 0x8c,
	0x48, 0x17, 0xe1, 0x7d, 0x08, 0xd4, 0xe6, 0x87, 0xc8, 0x35, 0x25, 0xb6, 0xd9, 0x29, 0x7c, 0x0e,
	0xa3, 0x46, 0x73, 0x2d, 0x68, 0x64, 0x7b, 0x27, 0x73, 0x67, 0x7a, 0xdd, 0x42, 0xd6, 0xe5, 0x66,
	0xff, 0x3c, 0x88, 0x4f, 0x39, 0xbe, 0x86, 0xe4, 0x70, 0xdc, 0x5c, 0x8b, 0x9b, 0xac, 0x16, 0x3f,
	0x8f, 0xa2, 0xd1, 0xa2, 0xb0, 0x9b, 0x21, 0xec, 0x6e, 0xc7, 0x59, 0x8f, 0x5b, 0xc7, 0x8d, 0xa8,
	0x8a, 0x4c, 0xd7, 0x52, 0x34, 0xd6, 0xf1, 0x84, 0x45, 0x2d, 0xf9, 0xd2, 0x02, 0x7c, 0x08, 0xd1,
	0x8e, 0x37, 0x3a, 0x6b, 0x89, 0x33, 0x4c, 0x5a, 0xb0, 0x36, 0x1a, 0x9f, 0x41, 0x6c, 0x3c, 0x9a,
	0x19, 0xb9, 0x90, 0xbf, 0xcc, 0x88, 0xc0, 0x8e, 0x18, 0x1b, 0xc6, 0x1c, 0xea, 0x4b, 0xcc, 0x8e,
	0x8c, 0x1b, 0x53, 0x12, 0x0e, 0x25, 0xa9, 0x43, 0xf8, 0x00, 0xc8, 0xf0, 0x05, 0x62, 0xd3, 0x83,
	0x9e, 0xa5, 0x40, 0xfa, 0x65, 0x99, 0x55, 0x4c, 0xb4, 0xdc, 0x8b, 0xdb, 0x71, 0x9e, 0xfd, 0x9d,
	0xb8, 0x85, 0xc3, 0xbc, 0x7b, 0x30, 0x2a, 0x77, 0x7c, 0xdb, 0xd8, 0x57, 0x1e, 0xb1, 0x4e, 0xcc,
	0xbe, 0x02, 0xe9, 0x0f, 0x02, 0x9f, 0x40, 0x50, 0xaa, 0x7a, 0xcf, 0xb5, 0xed, 0x9f, 0x2e, 0xc2,
	0xf9, 0x07, 0x2b, 0x99, 0xc3, 0x48, 0x21, 0x6c, 0x8e, 0xdd, 0x5b, 0xf8, 0xf6, 0x2d, 0x7a, 0xd9,
	0x5e, 0xd0, 0x46, 0x15, 0x37, 0xf6, 0x5e, 0x62, 0x66, 0xe3, 0x37, 0x0b, 0x08, 0xba, 0x7e, 0x04,
	0x08, 0xae, 0x56, 0x57, 0xeb, 0x74, 0x99, 0xdc, 0xc1, 0x09, 0x44, 0xe9, 0xea, 0xe2, 0xf3, 0xf2,
	0x72, 0xf5, 0xf1, 0x6d, 0xe2, 0x9d, 0xca, 0x45, 0xe2, 0xbf, 0x1f, 0x7f, 0x33, 0x1b, 0xae, 0x25,
	0xdf, 0xc9, 0x3f, 0x62, 0x13, 0xd8, 0x83, 0x7e, 0xf7, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x51, 0xab,
	0x00, 0x93, 0xe2, 0x02, 0x00, 0x00,
}
